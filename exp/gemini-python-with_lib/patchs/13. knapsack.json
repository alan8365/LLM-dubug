{
    "model_name": "gemini-1.0-pro",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\n\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n            if weight < j:\n                memo[i, j] = max(\n                    memo[i, j],\n                    value + memo[i - 1, j - weight]\n                )\n\n    return memo[len(items), capacity]\n\n\n\n```\nHere is the library code used in the code above:\n```python=\n\n```\nFixed code:\n",
        "sample": {
            "prog_id": 13,
            "prog_name": "knapsack",
            "language": "python",
            "fault_location": 0,
            "bug_type": ""
        },
        "prompt_type": "with_lib"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 3.598107099533081,
            "repaired_code": "\n\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(len(items)):\n        weight, value = items[i]\n\n        for j in range(capacity, weight - 1, -1):\n            memo[i, j] = max(\n                memo[i, j],\n                value + memo[i - 1, j - weight]\n            )\n\n    return memo[len(items) - 1, capacity]\n\n\n",
            "raw_code": "```python=\n\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(len(items)):\n        weight, value = items[i]\n\n        for j in range(capacity, weight - 1, -1):\n            memo[i, j] = max(\n                memo[i, j],\n                value + memo[i - 1, j - weight]\n            )\n\n    return memo[len(items) - 1, capacity]\n\n\n\n```"
        },
        {
            "patch_id": 1,
            "run_time": 3.1785037517547607,
            "repaired_code": "\n\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(len(items) + 1):\n        for j in range(capacity + 1):\n            if i == 0 or j == 0:\n                memo[i, j] = 0\n            else:\n                weight, value = items[i - 1]\n\n                if weight > j:\n                    memo[i, j] = memo[i - 1, j]\n                else:\n                    memo[i, j] = max(\n                        memo[i - 1, j],\n                        value + memo[i - 1, j - weight]\n                    )\n\n    return memo[len(items), capacity]\n\n\n",
            "raw_code": "```python=\n\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(len(items) + 1):\n        for j in range(capacity + 1):\n            if i == 0 or j == 0:\n                memo[i, j] = 0\n            else:\n                weight, value = items[i - 1]\n\n                if weight > j:\n                    memo[i, j] = memo[i - 1, j]\n                else:\n                    memo[i, j] = max(\n                        memo[i - 1, j],\n                        value + memo[i - 1, j - weight]\n                    )\n\n    return memo[len(items), capacity]\n\n\n\n```"
        },
        {
            "patch_id": 2,
            "run_time": 3.28664493560791,
            "repaired_code": "\n\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(len(items) + 1):\n        for j in range(1, capacity + 1):\n            weight, value = items[i - 1]\n\n            if i == 0 or j < weight:\n                memo[i, j] = memo[i - 1, j]\n            else:\n                memo[i, j] = max(\n                    memo[i - 1, j],\n                    value + memo[i - 1, j - weight]\n                )\n\n    return memo[len(items), capacity]\n\n\n",
            "raw_code": "```python=\n\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(len(items) + 1):\n        for j in range(1, capacity + 1):\n            weight, value = items[i - 1]\n\n            if i == 0 or j < weight:\n                memo[i, j] = memo[i - 1, j]\n            else:\n                memo[i, j] = max(\n                    memo[i - 1, j],\n                    value + memo[i - 1, j - weight]\n                )\n\n    return memo[len(items), capacity]\n\n\n\n```"
        }
    ]
}