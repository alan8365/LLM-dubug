{
    "model_name": "gemini-1.0-pro",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\n\ndef shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if isinstance(token, int):\n            rpntokens.append(token)\n        else:\n            while opstack and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n\n    while opstack:\n        rpntokens.append(opstack.pop())\n\n    return rpntokens\n\n\n\n\n```\nHere is the library code used in the code above:\n```python=\n\n```\nFixed code:\n",
        "sample": {
            "prog_id": 33,
            "prog_name": "shunting_yard",
            "language": "python",
            "fault_location": 0,
            "bug_type": ""
        },
        "prompt_type": "with_lib"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 5.307531118392944,
            "repaired_code": "\n\ndef shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if isinstance(token, int):\n            rpntokens.append(token)\n        else:\n            while opstack and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n            opstack.append(token)\n\n    while opstack:\n        rpntokens.append(opstack.pop())\n\n    return rpntokens\n\n\n\n tokens = [1,2,3,'/',4,'+']\n print(shunting_yard(tokens))\n",
            "raw_code": "```python=\n\ndef shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if isinstance(token, int):\n            rpntokens.append(token)\n        else:\n            while opstack and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n            opstack.append(token)\n\n    while opstack:\n        rpntokens.append(opstack.pop())\n\n    return rpntokens\n\n\n\n tokens = [1,2,3,'/',4,'+']\n print(shunting_yard(tokens))\n\n```"
        },
        {
            "patch_id": 1,
            "run_time": 3.5863711833953857,
            "repaired_code": "\ndef shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if isinstance(token, int):\n            rpntokens.append(token)\n        else:\n            while opstack and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n            opstack.append(token)\n    while opstack:\n        rpntokens.append(opstack.pop())\n\n    return rpntokens\n\n",
            "raw_code": "```python=\ndef shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if isinstance(token, int):\n            rpntokens.append(token)\n        else:\n            while opstack and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n            opstack.append(token)\n    while opstack:\n        rpntokens.append(opstack.pop())\n\n    return rpntokens\n\n\n```"
        },
        {
            "patch_id": 2,
            "run_time": 4.627790212631226,
            "repaired_code": "\n\ndef shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n\n    rpn_tokens = []\n    op_stack = []\n    for token in tokens:\n        if token not in precedence:\n            rpn_tokens.append(token)\n        else:\n            while op_stack and precedence[token] <= precedence[op_stack[-1]]:\n                rpn_tokens.append(op_stack.pop())\n            op_stack.append(token)\n\n    while op_stack:\n        rpn_tokens.append(op_stack.pop())\n\n    return rpn_tokens\n\n\n\n",
            "raw_code": "```python=\n\ndef shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n\n    rpn_tokens = []\n    op_stack = []\n    for token in tokens:\n        if token not in precedence:\n            rpn_tokens.append(token)\n        else:\n            while op_stack and precedence[token] <= precedence[op_stack[-1]]:\n                rpn_tokens.append(op_stack.pop())\n            op_stack.append(token)\n\n    while op_stack:\n        rpn_tokens.append(op_stack.pop())\n\n    return rpn_tokens\n\n\n\n\n```"
        }
    ]
}