{
    "sample": {
        "prog_id": 30,
        "prog_name": "shortest_path_length",
        "language": "python",
        "testcase_num": 4,
        "fault_location": 21,
        "bug_type": "",
        "bug_detail_desc": "在動態規劃更新節點距離時，沒有加上起點到前一節點的距離，導致除了起點終點相同和起點終點不可達等特殊情況以外的輸入都無法獲得正確結果"
    },
    "patchs_eval": [
        {
            "run_time": 5.787422180175781,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 4,
            "fail_num": 0,
            "reparied_code": "from heapq import *\n\n\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = []\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node is goalnode:\n            return distance\n        visited_nodes.add(node)\n        for nextnode in node.successors:\n            if nextnode in visited_nodes:\n                continue\n            new_distance = distance + length_by_edge[node, nextnode]\n            insert_or_update(\n                unvisited_nodes,\n                (\n                    min(get(unvisited_nodes, nextnode) or float(\"inf\"), new_distance),\n                    nextnode,\n                ),\n            )\n    return float(\"inf\")\n\n\ndef get(node_heap, wanted_node):\n    for dist, node in node_heap:\n        if node == wanted_node:\n            return dist\n    return float(\"inf\")\n\n\ndef insert_or_update(node_heap, dist_node):\n    dist, node = dist_node\n    for i, tpl in enumerate(node_heap):\n        a, b = tpl\n        if b == node:\n            node_heap[i] = dist_node\n            return None\n    heappush(node_heap, dist_node)\n    return None"
        },
        {
            "run_time": 5.868124008178711,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 2,
            "fail_num": 2,
            "reparied_code": "from heapq import *\n\n\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = []\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node is goalnode:\n            return distance\n        if node in visited_nodes:\n            continue\n        visited_nodes.add(node)\n        for nextnode in node.successors:\n            if nextnode in visited_nodes:\n                continue\n            insert_or_update(\n                unvisited_nodes,\n                (\n                    min(\n                        get(unvisited_nodes, nextnode) or float(\"inf\"),\n                        get(unvisited_nodes, node) + length_by_edge[node, nextnode],\n                    ),\n                    nextnode,\n                ),\n            )\n    return float(\"inf\")\n\n\ndef get(node_heap, wanted_node):\n    for dist, node in node_heap:\n        if node == wanted_node:\n            return dist\n    return float(\"inf\")\n\n\ndef insert_or_update(node_heap, dist_node):\n    dist, node = dist_node\n    for i, tpl in enumerate(node_heap):\n        a, b = tpl\n        if b == node:\n            node_heap[i] = dist_node\n            return None\n    heappush(node_heap, dist_node)\n    return None"
        },
        {
            "run_time": 5.779556035995483,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 4,
            "fail_num": 0,
            "reparied_code": "from heapq import *\n\n\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = []\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node is goalnode:\n            return distance\n        visited_nodes.add(node)\n        for nextnode in node.successors:\n            if nextnode in visited_nodes:\n                continue\n            new_distance = distance + length_by_edge[node, nextnode]\n            insert_or_update(\n                unvisited_nodes,\n                (\n                    min(get(unvisited_nodes, nextnode) or float(\"inf\"), new_distance),\n                    nextnode,\n                ),\n            )\n    return float(\"inf\")\n\n\ndef get(node_heap, wanted_node):\n    for dist, node in node_heap:\n        if node == wanted_node:\n            return dist\n    return None\n\n\ndef insert_or_update(node_heap, dist_node):\n    dist, node = dist_node\n    for i, tpl in enumerate(node_heap):\n        a, b = tpl\n        if b == node:\n            node_heap[i] = dist_node\n            return None\n    heappush(node_heap, dist_node)\n    return None"
        }
    ]
}