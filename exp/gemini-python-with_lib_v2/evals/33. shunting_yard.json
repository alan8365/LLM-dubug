{
    "sample": {
        "prog_id": 33,
        "prog_name": "shunting_yard",
        "language": "python",
        "testcase_num": 6,
        "fault_location": 16,
        "bug_type": "",
        "bug_detail_desc": "在處理到運算符的時候沒有將運算符放進opstack中，造成rpntokens沒有任何運算符，導致有運算符的輸入皆會出錯"
    },
    "patchs_eval": [
        {
            "run_time": 3.8398687839508057,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "def shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if token in precedence:\n            while opstack and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n            opstack.append(token)\n        else:\n            rpntokens.append(float(token))\n    while opstack:\n        rpntokens.append(opstack.pop())\n    return rpntokens"
        },
        {
            "run_time": 3.0990219116210938,
            "is_plausible": true,
            "is_correct": true,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "def shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if isinstance(token, int):\n            rpntokens.append(token)\n        else:\n            while opstack and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n            opstack.append(token)\n    while opstack:\n        rpntokens.append(opstack.pop())\n    return rpntokens"
        },
        {
            "run_time": 3.0109641551971436,
            "is_plausible": true,
            "is_correct": true,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "def shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if isinstance(token, int):\n            rpntokens.append(token)\n        else:\n            while opstack and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n            opstack.append(token)\n    while opstack:\n        rpntokens.append(opstack.pop())\n    return rpntokens"
        }
    ]
}