{
    "sample": {
        "prog_id": 13,
        "prog_name": "knapsack",
        "language": "python",
        "testcase_num": 9,
        "fault_location": 10,
        "bug_type": "判斷式錯誤",
        "bug_detail_desc": "在寫動態規劃的陣列時，沒有考慮到weight剛好等於容納上限的狀況，導致該類邊緣狀況輸出錯誤答案"
    },
    "patchs_eval": [
        {
            "run_time": 3.2105212211608887,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 2,
            "fail_num": 7,
            "reparied_code": "def knapsack(capacity, items):\n    from collections import defaultdict\n\n    memo = defaultdict(int)\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n        for j in range(capacity, weight - 1, -1):\n            memo[i, j] = memo[i - 1, j]\n            if weight < j:\n                memo[i, j] = max(memo[i, j], value + memo[i - 1, j - weight])\n    return memo[len(items), capacity]"
        },
        {
            "run_time": 4.043459892272949,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 2,
            "fail_num": 7,
            "reparied_code": "def knapsack(capacity, items):\n    from collections import defaultdict\n\n    memo = defaultdict(int)\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n        for j in range(capacity, weight - 1, -1):\n            memo[i, j] = memo[i - 1, j]\n            if weight < j:\n                memo[i, j] = max(memo[i, j], value + memo[i - 1, j - weight])\n    return memo[len(items), capacity]"
        },
        {
            "run_time": 3.250058889389038,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 2,
            "fail_num": 7,
            "reparied_code": "def knapsack(capacity, items):\n    from collections import defaultdict\n\n    memo = defaultdict(int)\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n        for j in range(capacity, weight - 1, -1):\n            memo[i, j] = memo[i - 1, j]\n            if weight < j:\n                memo[i, j] = max(memo[i, j], value + memo[i - 1, j - weight])\n    return memo[len(items), capacity]"
        }
    ]
}