{
    "sample": {
        "prog_id": 17,
        "prog_name": "lis",
        "language": "python",
        "testcase_num": 12,
        "fault_location": 12,
        "bug_type": "",
        "bug_detail_desc": "在更改longest變數時，缺少了max函數判斷新數值是否比原本長，導致在初期就找到答案的情況會在後期被更新為錯誤答案"
    },
    "patchs_eval": [
        {
            "run_time": 21.494858980178833,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 12,
            "fail_num": 0,
            "reparied_code": "def lis(arr):\n    if not arr:\n        return 0\n    ends = {}\n    longest = 0\n    for i, val in enumerate(arr):\n        max_length = 0\n        for j in range(1, longest + 1):\n            if arr[ends[j]] < val:\n                max_length = j\n        new_length = max_length + 1\n        if new_length > longest or (\n            new_length <= longest and val < arr[ends[new_length]]\n        ):\n            ends[new_length] = i\n            longest = max(longest, new_length)\n    return longest"
        },
        {
            "run_time": 19.713998079299927,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 1,
            "fail_num": 11,
            "reparied_code": "def lis(arr):\n    if not arr:\n        return 0\n    ends = {}\n    longest = 0\n    for val in arr:\n        low, high = 1, longest\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[ends[mid]] < val:\n                low = mid + 1\n            else:\n                high = mid - 1\n        length = low\n        if length > longest:\n            longest = length\n            ends[length] = len(arr)\n        if length not in ends or val < arr[ends[length]]:\n            ends[length] = arr.index(val)\n    return longest"
        },
        {
            "run_time": 24.835762977600098,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 12,
            "fail_num": 0,
            "reparied_code": "def lis(arr):\n    if not arr:\n        return 0\n    ends = {}\n    longest = 0\n    for i, val in enumerate(arr):\n        lo, hi = 1, longest\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if arr[ends[mid]] < val:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        length = lo\n        if length > longest:\n            longest = length\n            ends[length] = i\n        elif val < arr[ends[length]]:\n            ends[length] = i\n    return longest"
        }
    ]
}