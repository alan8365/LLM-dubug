{
    "sample": {
        "prog_id": 16,
        "prog_name": "levenshtein",
        "language": "python",
        "testcase_num": 6,
        "fault_location": 5,
        "bug_type": "",
        "bug_detail_desc": "在兩個字串首字相同的情況下，在遞迴式前錯誤的+1，由於兩字一致所以對於結果的影響應該是0而非1，導致除空字串以外的輸入皆會出錯"
    },
    "patchs_eval": [
        {
            "run_time": 29.04649019241333,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "def levenshtein(source, target):\n    if source == \"\" or target == \"\":\n        return len(source) or len(target)\n    elif source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])\n    else:\n        return 1 + min(\n            levenshtein(source, target[1:]),\n            levenshtein(source[1:], target),\n            levenshtein(source[1:], target[1:]),\n        )"
        },
        {
            "run_time": 19.519933938980103,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "def levenshtein(source, target):\n    if source == \"\" or target == \"\":\n        return len(source) or len(target)\n    if source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])\n    else:\n        return 1 + min(\n            levenshtein(source, target[1:]),\n            levenshtein(source[1:], target),\n            levenshtein(source[1:], target[1:]),\n        )"
        },
        {
            "run_time": 38.18143630027771,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "def levenshtein(source, target, memo={}):\n    if (source, target) in memo:\n        return memo[(source, target)]\n    if source == \"\" or target == \"\":\n        memo[(source, target)] = len(source) or len(target)\n        return memo[(source, target)]\n    if source[0] == target[0]:\n        result = levenshtein(source[1:], target[1:], memo)\n    else:\n        delete_cost = levenshtein(source[1:], target, memo)\n        substitute_cost = levenshtein(source[1:], target[1:], memo)\n        insert_cost = levenshtein(source, target[1:], memo)\n        result = 1 + min(delete_cost, substitute_cost, insert_cost)\n    memo[(source, target)] = result\n    return result\n\n\nprint(levenshtein(\"kitchen\", \"kitten\"))"
        }
    ]
}