{
    "sample": {
        "prog_id": 21,
        "prog_name": "minimum_spanning_tree",
        "language": "python",
        "testcase_num": 3,
        "fault_location": 10,
        "bug_type": "",
        "bug_detail_desc": "在更新group_by_node變數時，誤用update函數在for loop中更新set引發RuntimeError，導致幾乎所有輸入都無法運行"
    },
    "patchs_eval": [
        {
            "run_time": 45.747438192367554,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 3,
            "fail_num": 0,
            "reparied_code": "def minimum_spanning_tree(weight_by_edge):\n    leader = {}\n    def find(node):\n        if leader[node] != node:\n            leader[node] = find(leader[node])\n        return leader[node]\n    def union(node1, node2):\n        root1 = find(node1)\n        root2 = find(node2)\n        if root1 != root2:\n            leader[root2] = root1\n    for edge in weight_by_edge:\n        u, v = edge\n        if u not in leader:\n            leader[u] = u\n        if v not in leader:\n            leader[v] = v\n    mst_edges = set()\n    for edge in sorted(weight_by_edge, key=weight_by_edge.get):\n        u, v = edge\n        if find(u) != find(v):\n            mst_edges.add(edge)\n            union(u, v)\n    return mst_edges\nweights = {('A', 'B'): 3, ('B', 'C'): 1, ('A', 'C'): 2}\nmst = minimum_spanning_tree(weights)\nprint(mst)"
        },
        {
            "run_time": 35.42664122581482,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 3,
            "fail_num": 0,
            "reparied_code": "class UnionFind:\n    def __init__(self):\n        self.parent = {}\n        self.rank = {}\n    def find(self, node):\n        if self.parent[node] != node:\n            self.parent[node] = self.find(self.parent[node])\n        return self.parent[node]\n    def union(self, node1, node2):\n        root1 = self.find(node1)\n        root2 = self.find(node2)\n        if root1 != root2:\n            if self.rank[root1] > self.rank[root2]:\n                self.parent[root2] = root1\n            elif self.rank[root1] < self.rank[root2]:\n                self.parent[root1] = root2\n            else:\n                self.parent[root2] = root1\n                self.rank[root1] += 1\n    def make_set(self, node):\n        self.parent[node] = node\n        self.rank[node] = 0\ndef minimum_spanning_tree(weight_by_edge):\n    uf = UnionFind()\n    mst_edges = set()\n    for edge in weight_by_edge:\n        uf.make_set(edge[0])\n        uf.make_set(edge[1])\n    for edge in sorted(weight_by_edge, key=weight_by_edge.get):\n        u, v = edge\n        if uf.find(u) != uf.find(v):\n            mst_edges.add(edge)\n            uf.union(u, v)\n    return mst_edges"
        },
        {
            "run_time": 27.08175301551819,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 3,
            "fail_num": 0,
            "reparied_code": "class UnionFind:\n    def __init__(self):\n        self.parent = {}\n        self.rank = {}\n    def find(self, node):\n        if self.parent[node] != node:\n            self.parent[node] = self.find(self.parent[node])\n        return self.parent[node]\n    def union(self, node1, node2):\n        root1 = self.find(node1)\n        root2 = self.find(node2)\n        if root1 != root2:\n            if self.rank[root1] > self.rank[root2]:\n                self.parent[root2] = root1\n            elif self.rank[root1] < self.rank[root2]:\n                self.parent[root1] = root2\n            else:\n                self.parent[root2] = root1\n                self.rank[root1] += 1\ndef minimum_spanning_tree(weight_by_edge):\n    uf = UnionFind()\n    mst_edges = set()\n    for edge in sorted(weight_by_edge, key=weight_by_edge.get):\n        u, v = edge\n        if u not in uf.parent:\n            uf.parent[u] = u\n            uf.rank[u] = 0\n        if v not in uf.parent:\n            uf.parent[v] = v\n            uf.rank[v] = 0\n        if uf.find(u) != uf.find(v):\n            mst_edges.add(edge)\n            uf.union(u, v)\n    return mst_edges\nweights = {('A', 'B'): 1, ('B', 'C'): 2, ('A', 'C'): 3}\nprint(minimum_spanning_tree(weights))"
        }
    ]
}