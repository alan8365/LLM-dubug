{
    "sample": {
        "prog_id": 38,
        "prog_name": "topological_ordering",
        "language": "python",
        "testcase_num": 3,
        "fault_location": 5,
        "bug_type": "",
        "bug_detail_desc": "在判斷節點能否排進ordered_nodes時，把incoming寫成outgoing，造成除了沒有incoming節點的初始節點外沒有節點能被排序進來，導致輸入有邊圖皆會出錯"
    },
    "patchs_eval": [
        {
            "run_time": 26.104514837265015,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 3,
            "fail_num": 0,
            "reparied_code": "class Node:\n    def __init__(self, value=None, successors=None, predecessors=None, incoming_nodes=None, outgoing_nodes=None):\n        self.value = value\n        self.successors = successors if successors is not None else []\n        self.predecessors = predecessors if predecessors is not None else []\n        self.incoming_nodes = incoming_nodes if incoming_nodes is not None else []\n        self.outgoing_nodes = outgoing_nodes if outgoing_nodes is not None else []\ndef topological_ordering(nodes):\n    ordered_nodes = []\n    no_incoming_nodes = [node for node in nodes if not node.incoming_nodes]\n    while no_incoming_nodes:\n        current_node = no_incoming_nodes.pop()\n        ordered_nodes.append(current_node)\n        for next_node in current_node.outgoing_nodes:\n            next_node.incoming_nodes.remove(current_node)\n            if not next_node.incoming_nodes:\n                no_incoming_nodes.append(next_node)\n    if any(node.incoming_nodes for node in nodes):\n        raise ValueError(\"The graph has at least one cycle and cannot be topologically sorted.\")\n    return ordered_nodes"
        },
        {
            "run_time": 32.67210102081299,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 3,
            "fail_num": 0,
            "reparied_code": "class Node:\n    def __init__(self, value=None):\n        self.value = value\n        self.incoming_nodes = []\n        self.outgoing_nodes = []\ndef topological_ordering(nodes):\n    ordered_nodes = []\n    in_degree = {node: len(node.incoming_nodes) for node in nodes}\n    queue = [node for node in nodes if in_degree[node] == 0]\n    while queue:\n        node = queue.pop(0)\n        ordered_nodes.append(node)\n        for successor in node.outgoing_nodes:\n            in_degree[successor] -= 1\n            if in_degree[successor] == 0:\n                queue.append(successor)\n    if len(ordered_nodes) != len(nodes):\n        raise ValueError(\"Graph has at least one cycle or inconsistent state\")\n    return ordered_nodes\nnodeA = Node('A')\nnodeB = Node('B')\nnodeC = Node('C')\nnodeD = Node('D')\nnodeE = Node('E')\nnodeA.outgoing_nodes.append(nodeB)\nnodeB.incoming_nodes.append(nodeA)\nnodeB.outgoing_nodes.append(nodeC)\nnodeC.incoming_nodes.append(nodeB)\nnodeA.outgoing_nodes.append(nodeD)\nnodeD.incoming_nodes.append(nodeA)\nnodeC.outgoing_nodes.append(nodeE)\nnodeE.incoming_nodes.append(nodeC)\nnodes = [nodeA, nodeB, nodeC, nodeD, nodeE]\ntry:\n    order = topological_ordering(nodes)\n    print([node.value for node in order])\nexcept ValueError as e:\n    print(e)"
        },
        {
            "run_time": 30.597425937652588,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 3,
            "fail_num": 0,
            "reparied_code": "class Node:\n    def __init__(self, value=None, successor=None, successors=None, predecessors=None, incoming_nodes=None, outgoing_nodes=None):\n        self.value = value\n        self.successor = successor if successor else []\n        self.successors = successors if successors else []\n        self.predecessors = predecessors if predecessors else []\n        self.incoming_nodes = incoming_nodes if incoming_nodes else []\n        self.outgoing_nodes = outgoing_nodes if outgoing_nodes else []\ndef topological_ordering(nodes):\n    in_degree = {node: len(node.incoming_nodes) for node in nodes}\n    ordered_nodes = []\n    queue = [node for node in nodes if len(node.incoming_nodes) == 0]\n    while queue:\n        current_node = queue.pop(0)\n        ordered_nodes.append(current_node)\n        for next_node in current_node.outgoing_nodes:\n            in_degree[next_node] -= 1\n            if in_degree[next_node] == 0:\n                queue.append(next_node)\n    if len(ordered_nodes) != len(nodes):\n        raise Exception(\"A cycle was detected in the graph, and thus, a topological ordering is not possible.\")\n    return ordered_nodes"
        }
    ]
}