{
    "model_name": "gemini-1.0-pro",
    "prompt": {
        "prompt": "Fix the bug in the following code. The bug is on the line commented below:\n```python=\ndef minimum_spanning_tree(weight_by_edge):\n    group_by_node = {}\n    mst_edges = set()\n\n    for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):\n        u, v = edge\n        if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):\n            mst_edges.add(edge)\n            group_by_node[u].update(group_by_node[v])\n            for node in group_by_node[v]:\n                group_by_node[node].update(group_by_node[u]) # The bug is here\n\n    return mst_edges\n```\nHere is the library code used in the code above. The library is view-only and uneditable:\n```python=\n\n```\n",
        "sample": {
            "prog_id": 21,
            "prog_name": "minimum_spanning_tree",
            "language": "python",
            "testcase_num": 3,
            "fault_location": 10,
            "bug_type": "",
            "bug_detail_desc": "\u5728\u66f4\u65b0group_by_node\u8b8a\u6578\u6642\uff0c\u8aa4\u7528update\u51fd\u6578\u5728for loop\u4e2d\u66f4\u65b0set\u5f15\u767cRuntimeError\uff0c\u5c0e\u81f4\u5e7e\u4e4e\u6240\u6709\u8f38\u5165\u90fd\u7121\u6cd5\u904b\u884c"
        },
        "prompt_type": "with_location"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 3.526859998703003,
            "repaired_code": "\nfor node in group_by_node[v]:\n    group_by_node[node].update(group_by_node[u])",
            "raw_code": "The bug is in the following line:\n```python=\nfor node in group_by_node[v]:\n    group_by_node[node].update(group_by_node[u])\n```\nIt should be replaced with the following code:\n```python=\nfor node in group_by_node[v]:\n    if node != u:\n        group_by_node[node].update(group_by_node[u])\n```\nThe bug arises because when `node == u`, the code tries to update the group for node `u` using the group for node `v` and the group for node `u`. This is incorrect and should not happen. The correct code checks if `node` is not equal to `u` to avoid updating the group for node `u` using the group for node `u`."
        },
        {
            "patch_id": 1,
            "run_time": 4.7667059898376465,
            "repaired_code": "\nfor node in group_by_node[v]:\n    group_by_node[node].update(group_by_node[u])",
            "raw_code": "The bug is in the line:\n```python=\nfor node in group_by_node[v]:\n    group_by_node[node].update(group_by_node[u])\n```\nIt should be:\n```python=\nfor node in group_by_node.pop(v):\n    group_by_node[node].update(group_by_node[u])\n```\nThe correct code should be:\n```python=\ndef minimum_spanning_tree(weight_by_edge):\n    group_by_node = {}\n    mst_edges = set()\n\n    for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):\n        u, v = edge\n        if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):\n            mst_edges.add(edge)\n            group_by_node[u].update(group_by_node[v])\n            for node in group_by_node.pop(v):\n                group_by_node[node].update(group_by_node[u])\n\n    return mst_edges\n```"
        },
        {
            "patch_id": 2,
            "run_time": 1.9306368827819824,
            "repaired_code": "\n    for node in group_by_node[v]:\n        group_by_node[node].update(group_by_node[u])\n        del group_by_node[node] # Add the del statement here",
            "raw_code": "The bug is missing a `del` statement. The code should be:\n```python=\n    for node in group_by_node[v]:\n        group_by_node[node].update(group_by_node[u])\n        del group_by_node[node] # Add the del statement here\n```"
        }
    ]
}