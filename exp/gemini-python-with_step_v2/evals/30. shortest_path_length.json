{
    "sample": {
        "prog_id": 30,
        "prog_name": "shortest_path_length",
        "language": "python",
        "testcase_num": 4,
        "fault_location": 21,
        "bug_type": "",
        "bug_detail_desc": "在動態規劃更新節點距離時，沒有加上起點到前一節點的距離，導致除了起點終點相同和起點終點不可達等特殊情況以外的輸入都無法獲得正確結果"
    },
    "patchs_eval": [
        {
            "run_time": 6.348212957382202,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 2,
            "fail_num": 2,
            "reparied_code": "from heapq import *\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = []\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    node_pos = {startnode: 0}\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node is goalnode:\n            return distance\n        visited_nodes.add(node)\n        for nextnode in node.successors:\n            if nextnode in visited_nodes:\n                continue\n            new_dist = distance + length_by_edge[node, nextnode]\n            old_dist, old_pos = node_pos.get(nextnode, (float('inf'), None))\n            if new_dist < old_dist:\n                node_pos[nextnode] = unvisited_nodes.index((old_dist, nextnode))\n                unvisited_nodes[old_pos] = (new_dist, nextnode)\n    return float('inf')"
        },
        {
            "run_time": 9.311789989471436,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 2,
            "fail_num": 2,
            "reparied_code": "from heapq import *\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = []\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node is goalnode:\n            return distance\n        visited_nodes.add(node)\n        for nextnode in node.successors:\n            if nextnode in visited_nodes:\n                continue\n            new_distance = min(\n                get(unvisited_nodes, nextnode) or float('inf'),\n                get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]\n            )\n            insert_or_update(unvisited_nodes,\n                (new_distance, nextnode)\n            )\n    return float('inf')\ndef get(node_heap, wanted_node):\n    for dist, node in node_heap:\n        if node == wanted_node:\n            return dist\n    return float('inf')\ndef insert_or_update(node_heap, dist_node):\n    dist, node = dist_node\n    for i, tpl in enumerate(node_heap):\n        a, b = tpl\n        if b == node:\n            node_heap[i] = dist_node\n            return None\n    heappush(node_heap, dist_node)\n    return None"
        },
        {
            "run_time": 7.890866041183472,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 2,
            "fail_num": 2,
            "reparied_code": "from heapq import *\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = []\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node is goalnode:\n            return distance\n        visited_nodes.add(node)\n        for nextnode in neighbours(node):\n            if nextnode in visited_nodes:\n                continue\n            insert_or_update(unvisited_nodes,\n                (min(\n                    get(unvisited_nodes, nextnode) or float('inf'),\n                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]\n                ),\n                nextnode)\n            )\n    return float('inf')\ndef get(node_heap, wanted_node):\n    for dist, node in node_heap:\n        if node == wanted_node:\n            return dist\n    return 0\ndef insert_or_update(node_heap, dist_node):\n    dist, node = dist_node\n    for i, tpl in enumerate(node_heap):\n        a, b = tpl\n        if b == node:\n            node_heap[i] = dist_node\n            return None\n    heappush(node_heap, dist_node)\n    return None\ndef neighbours(node):\n    return node.successors"
        }
    ]
}