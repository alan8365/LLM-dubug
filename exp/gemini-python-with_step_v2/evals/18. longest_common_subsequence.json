{
    "sample": {
        "prog_id": 18,
        "prog_name": "longest_common_subsequence",
        "language": "python",
        "testcase_num": 10,
        "fault_location": 5,
        "bug_type": "",
        "bug_detail_desc": "在兩字串首字一致呼叫遞迴式的情況下，字串b沒有移除首字便直接輸入，導致不斷重複比較輸出錯誤答案"
    },
    "patchs_eval": [
        {
            "run_time": 4.887280225753784,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 0,
            "fail_num": 10,
            "reparied_code": "def longest_common_subsequence(a, b):\n    if not a or not b:\n        return None"
        },
        {
            "run_time": 7.917765855789185,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 6,
            "fail_num": 4,
            "reparied_code": "def longest_common_subsequence(a, b):\n    if a == '' or b == '':\n        return ''\n    elif a[0] == b[0]:\n        return a[0] + longest_common_subsequence(a[1:], b)\n    else:\n        return max(\n            longest_common_subsequence(a, b[1:]),\n            longest_common_subsequence(a[1:], b[1:]),\n            key=len\n        )"
        },
        {
            "run_time": 3.99330472946167,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 0,
            "fail_num": 10,
            "reparied_code": "def longest_common_subsequence(a, b):\n    if not a or not b:\n        return ''\n    elif a[0] == b[0]:\n        return a[0] + longest_common_subsequence(a[1:], b[1:])\n    else:\n        return max(\n            longest_common_subsequence(a, b[1:]),\n            longest_common_subsequence(a[1:], b),\n            key=len,\n            default=''\n        )"
        }
    ]
}