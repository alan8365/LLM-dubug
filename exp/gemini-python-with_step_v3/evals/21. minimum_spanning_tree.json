{
    "sample": {
        "prog_id": 21,
        "prog_name": "minimum_spanning_tree",
        "language": "python",
        "testcase_num": 3,
        "fault_location": 10,
        "bug_type": "",
        "bug_detail_desc": "在更新group_by_node變數時，誤用update函數在for loop中更新set引發RuntimeError，導致幾乎所有輸入都無法運行"
    },
    "patchs_eval": [
        {
            "run_time": 6.801613092422485,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 0,
            "fail_num": 3,
            "reparied_code": "def minimum_spanning_tree(weight_by_edge):\n    group_by_node = {}\n    mst_edges = set()\n    for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):\n        u, v = edge\n        if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}) and group_by_node[u] != group_by_node[v]:\n            mst_edges.add(edge)\n            group_by_node[u].update(group_by_node[v])\n            for node in group_by_node[v]:\n                group_by_node[node].update(group_by_node[u])\n    return mst_edges"
        },
        {
            "run_time": 6.867618083953857,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 1,
            "fail_num": 2,
            "reparied_code": "def minimum_spanning_tree(weight_by_edge):\n    group_by_node = {}\n    mst_edges = set()\n    for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):\n        u, v = edge\n        if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):\n            mst_edges.add(edge)\n            group_by_node[u] = group_by_node[u].union(group_by_node[v])\n            for node in group_by_node[v]:\n                group_by_node[node] = group_by_node[node].union(group_by_node[u])\n    return mst_edges"
        },
        {
            "run_time": 6.79318904876709,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 0,
            "fail_num": 3,
            "reparied_code": "def minimum_spanning_tree(weight_by_edge):\n    group_by_node = {}\n    mst_edges = set()\n    for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):\n        u, v = edge\n        if group_by_node.get(u, set()).add(u) != group_by_node.get(v, set()).add(v):\n            mst_edges.add(edge)\n            group_by_node[u] = group_by_node[u].union(group_by_node[v])\n            for node in group_by_node[v]:\n                group_by_node[node] = group_by_node[node].union(group_by_node[u])\n    return mst_edges"
        }
    ]
}