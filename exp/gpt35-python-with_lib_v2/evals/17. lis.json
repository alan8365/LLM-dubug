{
    "sample": {
        "prog_id": 17,
        "prog_name": "lis",
        "language": "python",
        "testcase_num": 12,
        "fault_location": 12,
        "bug_type": "",
        "bug_detail_desc": "在更改longest變數時，缺少了max函數判斷新數值是否比原本長，導致在初期就找到答案的情況會在後期被更新為錯誤答案"
    },
    "patchs_eval": [
        {
            "run_time": 2.5258781909942627,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 5,
            "fail_num": 7,
            "reparied_code": "def lis(arr):\n    ends = {}\n    longest = 0\n    for i, val in enumerate(arr):\n        prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]\n        length = max(prefix_lengths) if prefix_lengths else 0\n        if length == longest or val < arr[ends[length] + 1]:\n            ends[length + 1] = i\n            longest = length + 1\n    return longest"
        },
        {
            "run_time": 5.773498058319092,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 11,
            "fail_num": 1,
            "reparied_code": "def lis(arr):\n    ends = {0: arr[0]}\n    longest = 1\n    for i in range(1, len(arr)):\n        if arr[i] < ends[0]:\n            ends[0] = arr[i]\n        elif arr[i] > ends[longest - 1]:\n            ends[longest] = arr[i]\n            longest += 1\n        else:\n            low, high = 0, longest - 1\n            while low < high:\n                mid = low + (high - low) // 2\n                if arr[i] > ends[mid]:\n                    low = mid + 1\n                else:\n                    high = mid\n            ends[low] = arr[i]\n    return longest"
        },
        {
            "run_time": 4.2409827709198,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 9,
            "fail_num": 3,
            "reparied_code": "def lis(arr):\n    ends = {0: -1}\n    longest = 0\n    for i, val in enumerate(arr):\n        prefix_lengths = [j for j in ends if arr[ends[j]] < val]\n        length = max(prefix_lengths, default=0)\n        if length == longest or val < arr[ends[length]]:\n            ends[length + 1] = i\n            longest = length + 1\n    return longest"
        }
    ]
}