{
    "sample": {
        "prog_id": 16,
        "prog_name": "levenshtein",
        "language": "python",
        "testcase_num": 6,
        "fault_location": 5,
        "bug_type": "",
        "bug_detail_desc": "在兩個字串首字相同的情況下，在遞迴式前錯誤的+1，由於兩字一致所以對於結果的影響應該是0而非1，導致除空字串以外的輸入皆會出錯"
    },
    "patchs_eval": [
        {
            "run_time": 3.0269811153411865,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "\ndef levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])\n\n    else:\n        return 1 + min(\n            levenshtein(source, target[1:]),\n            levenshtein(source[1:], target[1:]),\n            levenshtein(source[1:], target)\n        )"
        },
        {
            "run_time": 3.5583391189575195,
            "pass_num": 0,
            "fail_num": 0,
            "reparied_code": "\ndef levenshtein(source, target):\n    if source == '' or target == '':\n        return max(len(source), len(target)  # fixed the return statement\n\n    elif source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])  # removed the addition of 1 here\n\n    else:\n        return 1 + min(\n            levenshtein(source, target[1:]),\n            levenshtein(source[1:], target[1:]),\n            levenshtein(source[1:], target)\n        )"
        },
        {
            "run_time": 1.8769919872283936,
            "pass_num": 5,
            "fail_num": 1,
            "reparied_code": "\ndef levenshtein(source, target):\n    if source == '' or target == '':\n        return max(len(source), len(target))\n\n    elif source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])\n\n    else:\n        return 1 + min(\n            levenshtein(source, target[1:]),\n            levenshtein(source[1:], target[1:]),\n            levenshtein(source[1:], target)\n        )"
        }
    ]
}