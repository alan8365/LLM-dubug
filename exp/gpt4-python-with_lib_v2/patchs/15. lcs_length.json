{
    "model_name": "gpt-4",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\ndef lcs_length(s, t):\n    from collections import Counter\n\n    dp = Counter()\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i, j] = dp[i - 1, j] + 1\n\n    return max(dp.values()) if dp else 0\n\n\n\n\n\n```\nHere is the library code used in the code above. The library is view-only and uneditable:\n```python=\n\n```\nFixed code:\n",
        "sample": {
            "prog_id": 15,
            "prog_name": "lcs_length",
            "language": "python",
            "testcase_num": 9,
            "fault_location": 0,
            "bug_type": ""
        },
        "prompt_type": "with_lib"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 6.422682762145996,
            "repaired_code": "\ndef lcs_length(s, t):\n    from collections import defaultdict\n\n    dp = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                if i == 0 or j == 0:\n                    dp[i, j] = 1\n                else:\n                    dp[i, j] = dp[i - 1, j - 1] + 1\n            else:\n                if i == 0 and j > 0:\n                    dp[i, j] = dp[i, j - 1]\n                elif j == 0 and i > 0:\n                    dp[i, j] = dp[i - 1, j]\n                elif i > 0 and j > 0:\n                    dp[i, j] = max(dp[i, j - 1], dp[i - 1, j])\n\n    return max(dp.values()) if dp else 0",
            "raw_code": "```python\ndef lcs_length(s, t):\n    from collections import defaultdict\n\n    dp = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                if i == 0 or j == 0:\n                    dp[i, j] = 1\n                else:\n                    dp[i, j] = dp[i - 1, j - 1] + 1\n            else:\n                if i == 0 and j > 0:\n                    dp[i, j] = dp[i, j - 1]\n                elif j == 0 and i > 0:\n                    dp[i, j] = dp[i - 1, j]\n                elif i > 0 and j > 0:\n                    dp[i, j] = max(dp[i, j - 1], dp[i - 1, j])\n\n    return max(dp.values()) if dp else 0\n```"
        },
        {
            "patch_id": 1,
            "run_time": 2.9894559383392334,
            "repaired_code": "\ndef lcs_length(s, t):\n    from collections import defaultdict\n\n    dp = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i, j] = dp[i - 1, j - 1] + 1\n            else:\n                dp[i, j] = max(dp[i, j - 1], dp[i - 1, j])\n\n    return max(dp.values()) if dp else 0",
            "raw_code": "```python\ndef lcs_length(s, t):\n    from collections import defaultdict\n\n    dp = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i, j] = dp[i - 1, j - 1] + 1\n            else:\n                dp[i, j] = max(dp[i, j - 1], dp[i - 1, j])\n\n    return max(dp.values()) if dp else 0\n```"
        },
        {
            "patch_id": 2,
            "run_time": 4.077339172363281,
            "repaired_code": "\ndef lcs_length(s, t):\n    from collections import defaultdict\n\n    dp = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i, j] = dp[i - 1, j - 1] + 1\n            else:\n                dp[i, j] = max(dp[i - 1, j], dp[i, j - 1])\n\n    return dp[len(s) - 1, len(t) - 1] if dp else 0",
            "raw_code": "```python=\ndef lcs_length(s, t):\n    from collections import defaultdict\n\n    dp = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i, j] = dp[i - 1, j - 1] + 1\n            else:\n                dp[i, j] = max(dp[i - 1, j], dp[i, j - 1])\n\n    return dp[len(s) - 1, len(t) - 1] if dp else 0\n```"
        }
    ]
}