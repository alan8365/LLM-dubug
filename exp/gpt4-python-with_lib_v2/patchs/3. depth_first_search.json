{
    "model_name": "gpt-4",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\ndef depth_first_search(startnode, goalnode):\n    nodesvisited = set()\n\n    def search_from(node):\n        if node in nodesvisited:\n            return False\n        elif node is goalnode:\n            return True\n        else:\n            return any(\n                search_from(nextnode) for nextnode in node.successors\n            )\n\n    return search_from(startnode)\n\n\n\n\n\n```\nHere is the library code used in the code above. The library is view-only and uneditable:\n```python=\nclass Node:\n    def __init__(self, value=None, successor=None, successors=[], predecessors=[], incoming_nodes=[], outgoing_nodes=[]):\n        self.value = value\n        self.successor = successor\n        self.successors = successors\n        self.predecessors = predecessors\n        self.incoming_nodes = incoming_nodes\n        self.outgoing_nodes = outgoing_nodes\n\n    def successor(self):\n        return self.successor\n\n    def successors(self):\n        return self.successors\n\n    def predecessors(self):\n        return self.predecessors\n\n\n```\nFixed code:\n",
        "sample": {
            "prog_id": 3,
            "prog_name": "depth_first_search",
            "language": "python",
            "testcase_num": 5,
            "fault_location": 0,
            "bug_type": ""
        },
        "prompt_type": "with_lib"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 3.2259912490844727,
            "repaired_code": "\ndef depth_first_search(startnode, goalnode):\n    nodesvisited = set()\n\n    def search_from(node):\n        if node in nodesvisited:\n            return False\n        nodesvisited.add(node)\n        if node is goalnode:\n            return True\n        else:\n            return any(\n                search_from(nextnode) for nextnode in node.successors()\n            )\n\n    return search_from(startnode)",
            "raw_code": "```python=\ndef depth_first_search(startnode, goalnode):\n    nodesvisited = set()\n\n    def search_from(node):\n        if node in nodesvisited:\n            return False\n        nodesvisited.add(node)\n        if node is goalnode:\n            return True\n        else:\n            return any(\n                search_from(nextnode) for nextnode in node.successors()\n            )\n\n    return search_from(startnode)\n```"
        },
        {
            "patch_id": 1,
            "run_time": 3.7447760105133057,
            "repaired_code": "\ndef depth_first_search(startnode, goalnode):\n    nodesvisited = set()\n\n    def search_from(node):\n        if node in nodesvisited:\n            return False\n        elif node is goalnode:\n            return True\n        else:\n            nodesvisited.add(node)\n            return any(\n                search_from(nextnode) for nextnode in node.successors()\n            )\n\n    return search_from(startnode)",
            "raw_code": "```python=\ndef depth_first_search(startnode, goalnode):\n    nodesvisited = set()\n\n    def search_from(node):\n        if node in nodesvisited:\n            return False\n        elif node is goalnode:\n            return True\n        else:\n            nodesvisited.add(node)\n            return any(\n                search_from(nextnode) for nextnode in node.successors()\n            )\n\n    return search_from(startnode)\n```"
        },
        {
            "patch_id": 2,
            "run_time": 6.758460283279419,
            "repaired_code": "\ndef depth_first_search(startnode, goalnode):\n    nodesvisited = set()\n\n    def search_from(node):\n        if node in nodesvisited:\n            return False\n        nodesvisited.add(node)\n        if node is goalnode:\n            return True\n        else:\n            return any(\n                search_from(nextnode) for nextnode in node.successors()\n            )\n\n    return search_from(startnode)",
            "raw_code": "```python\ndef depth_first_search(startnode, goalnode):\n    nodesvisited = set()\n\n    def search_from(node):\n        if node in nodesvisited:\n            return False\n        nodesvisited.add(node)\n        if node is goalnode:\n            return True\n        else:\n            return any(\n                search_from(nextnode) for nextnode in node.successors()\n            )\n\n    return search_from(startnode)\n```\n\nExplanation:\nThe bug in the original code lies in not adding nodes to the \"nodesvisited\" set after visiting them, causing the algorithm to potentially get stuck in cycles. Adding nodes to the \"nodesvisited\" set after visiting them ensures the algorithm does not re-visit any nodes, thereby preventing endless loops. Also, successors is a method, so should be called with parentheses."
        }
    ]
}