{
    "sample": {
        "prog_id": 30,
        "prog_name": "shortest_path_length",
        "language": "python",
        "testcase_num": 4,
        "fault_location": 19,
        "bug_type": "",
        "bug_detail_desc": "在動態規劃更新節點距離時，沒有加上起點到前一節點的距離，導致除了起點終點相同和起點終點不可達等特殊情況以外的輸入都無法獲得正確結果"
    },
    "patchs_eval": [
        {
            "run_time": 9.745713949203491,
            "pass_num": 3,
            "fail_num": 1,
            "reparied_code": "\nfrom heapq import *\n\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = [] # List containing (node, distance) pairs\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    shortest_distances = {startnode: 0}\n\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node == goalnode:\n            return distance\n\n        visited_nodes.add(node)\n\n        for nextnode in node.successors:\n            if nextnode in visited_nodes:\n                continue\n\n            new_distance = shortest_distances[node] + length_by_edge[node, nextnode]\n            if nextnode not in shortest_distances or new_distance < shortest_distances[nextnode]:\n                shortest_distances[nextnode] = new_distance\n                heappush(unvisited_nodes, (new_distance, nextnode))\n\n    # Return infinity if no path exists\n    return float('inf')"
        },
        {
            "run_time": 17.297391891479492,
            "pass_num": 3,
            "fail_num": 1,
            "reparied_code": "\nfrom heapq import *\n\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = [] # heap containing (distance, node) pairs\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    shortest_distances = {startnode: 0}\n\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node is goalnode:\n            return distance\n        \n        if node in visited_nodes:\n            continue\n            \n        visited_nodes.add(node)\n\n        for nextnode in node.successors:\n            if nextnode in visited_nodes:\n                continue\n                \n            new_distance = shortest_distances[node] + length_by_edge[node, nextnode]\n\n            if nextnode not in shortest_distances or new_distance < shortest_distances[nextnode]:\n                shortest_distances[nextnode] = new_distance\n                heappush(unvisited_nodes, (new_distance, nextnode))\n\n    return float('inf')\n\n\nclass Node:\n    def __init__(self, value=None, successor=None, successors=[], predecessors=[], incoming_nodes=[], outgoing_nodes=[]):\n        self.value = value\n        self.successor = successor\n        self.successors = successors\n        self.predecessors = predecessors\n        self.incoming_nodes = incoming_nodes\n        self.outgoing_nodes = outgoing_nodes"
        },
        {
            "run_time": 19.107182025909424,
            "pass_num": 4,
            "fail_num": 0,
            "reparied_code": "\nfrom heapq import *\n\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = [] # Heap containing (node, distance) pairs\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node == goalnode:\n            return distance\n\n        visited_nodes.add(node)\n\n        for nextnode in node.successors:\n            if nextnode in visited_nodes:\n                continue\n\n            new_distance = distance + length_by_edge.get((node, nextnode), float('inf'))\n            old_distance = get(unvisited_nodes, nextnode)\n\n            if old_distance is None or new_distance < old_distance:\n                insert_or_update(unvisited_nodes, (new_distance, nextnode))\n\n    return float('inf')\n\n\ndef get(node_heap, wanted_node):\n    for dist, node in node_heap:\n        if node == wanted_node:\n            return dist\n    return None\n\ndef insert_or_update(node_heap, dist_node):\n    dist, node = dist_node\n    for i, tpl in enumerate(node_heap):\n        if tpl[1] == node:\n            node_heap[i] = dist_node\n            heapify(node_heap)\n            return\n\n    heappush(node_heap, dist_node)"
        }
    ]
}