{
    "sample": {
        "prog_id": 33,
        "prog_name": "shunting_yard",
        "language": "python",
        "testcase_num": 6,
        "fault_location": 16,
        "bug_type": "",
        "bug_detail_desc": "在處理到運算符的時候沒有將運算符放進opstack中，造成rpntokens沒有任何運算符，導致有運算符的輸入皆會出錯"
    },
    "patchs_eval": [
        {
            "run_time": 14.95001482963562,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "\ndef shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if isinstance(token, int):\n            rpntokens.append(token)\n        else:\n            while opstack and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n            opstack.append(token)\n\n    while opstack:\n        rpntokens.append(opstack.pop())\n\n    return rpntokens"
        },
        {
            "run_time": 19.65159296989441,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "\ndef shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if isinstance(token, int):\n            rpntokens.append(token)\n        elif token == '(':\n            opstack.append(token)\n        elif token == ')':\n            while opstack and opstack[-1] != '(':\n                rpntokens.append(opstack.pop())\n            if opstack and opstack[-1] == '(':\n                opstack.pop()\n        else:\n            while opstack and opstack[-1] != '(' and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n            opstack.append(token)\n\n    while opstack:\n        rpntokens.append(opstack.pop())\n\n    return rpntokens"
        },
        {
            "run_time": 23.81521201133728,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "\ndef shunting_yard(tokens):\n    precedence = {\n        '+': 1,\n        '-': 1,\n        '*': 2,\n        '/': 2\n    }\n\n    rpntokens = []\n    opstack = []\n    for token in tokens:\n        if isinstance(token, int):\n            rpntokens.append(token)\n        elif token == '(':\n            opstack.append(token)\n        elif token == ')':\n            while opstack and opstack[-1] != '(':\n                rpntokens.append(opstack.pop())\n            if opstack and opstack[-1] == '(':\n                opstack.pop()\n        else:\n            while opstack and opstack[-1] != '(' and precedence[token] <= precedence[opstack[-1]]:\n                rpntokens.append(opstack.pop())\n            opstack.append(token)\n\n    while opstack:\n        rpntokens.append(opstack.pop())\n\n    return rpntokens"
        }
    ]
}