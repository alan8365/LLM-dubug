{
    "sample": {
        "prog_id": 29,
        "prog_name": "rpn_eval",
        "language": "python",
        "testcase_num": 6,
        "fault_location": 18,
        "bug_type": "",
        "bug_detail_desc": "在運算並放回stack時，忽略了stack中第一個pop的元素是擺在運算式後的元素，導致運算不符合交換律的輸入時皆會錯誤"
    },
    "patchs_eval": [
        {
            "run_time": 19.10926103591919,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 0,
            "fail_num": 0,
            "reparied_code": "if isinstance(token, (float, int)):"
        },
        {
            "run_time": 25.963906049728394,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "def rpn_eval(tokens):\n    def op(symbol, a, b):\n        return {\n            '+': lambda a, b: a + b,\n            '-': lambda a, b: b - a,\n            '*': lambda a, b: a * b,\n            '/': lambda a, b: b / a\n        }[symbol](a, b)\n    stack = []\n    for token in tokens:\n        if isinstance(token, (int, float)):\n            stack.append(token)\n        else:\n            if len(stack) < 2:\n                raise ValueError(\"Insufficient operands for operator\")\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(\n                op(token, a, b)\n            )\n    if len(stack) != 1:\n        raise ValueError(\"Invalid expression\")\n    return stack.pop()"
        },
        {
            "run_time": 24.463709831237793,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 3,
            "fail_num": 3,
            "reparied_code": "def rpn_eval(tokens):\n    def op(symbol, a, b):\n        return {\n            '+': lambda a, b: a + b,\n            '-': lambda a, b: b - a,\n            '*': lambda a, b: a * b,\n            '/': lambda a, b: b / a\n        }[symbol](a, b)\n    stack = []\n    for token in tokens:\n        if isinstance(token, (int, float)):\n            stack.append(token)\n        else:\n            if len(stack) < 2:\n                raise ValueError(\"Insufficient operands in the stack\")\n            b = stack.pop()\n            a = stack.pop()\n            stack.append(\n                op(token, a, b)\n            )\n    if len(stack) != 1:\n        raise ValueError(\"Invalid RPN expression\")\n    return stack.pop()"
        }
    ]
}