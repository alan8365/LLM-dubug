{
    "sample": {
        "prog_id": 30,
        "prog_name": "shortest_path_length",
        "language": "python",
        "testcase_num": 4,
        "fault_location": 21,
        "bug_type": "",
        "bug_detail_desc": "在動態規劃更新節點距離時，沒有加上起點到前一節點的距離，導致除了起點終點相同和起點終點不可達等特殊情況以外的輸入都無法獲得正確結果"
    },
    "patchs_eval": [
        {
            "run_time": 30.070836782455444,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 1,
            "fail_num": 3,
            "reparied_code": "from heapq import *\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = []\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node == goalnode:\n            return distance\n        visited_nodes.add(node)\n        for nextnode, edge_length in length_by_edge[node].items():\n            if nextnode in visited_nodes:\n                continue\n            new_distance = distance + edge_length\n            idx = None\n            for i, (dist, n) in enumerate(unvisited_nodes):\n                if n == nextnode:\n                    idx = i\n                    break\n            if idx is not None:\n                if new_distance < unvisited_nodes[idx][0]:\n                    unvisited_nodes[idx] = (new_distance, nextnode)\n                    heapify(unvisited_nodes)\n            else:\n                heappush(unvisited_nodes, (new_distance, nextnode))\n    return float('inf')"
        },
        {
            "run_time": 26.93508815765381,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 4,
            "fail_num": 0,
            "reparied_code": "from heapq import *\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = []\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node == goalnode:\n            return distance\n        visited_nodes.add(node)\n        for nextnode in node.successors:\n            if nextnode in visited_nodes:\n                continue\n            new_distance = distance + length_by_edge[node, nextnode]\n            insert_or_update(unvisited_nodes, (new_distance, nextnode))\n    return float('inf')\ndef get(node_heap, wanted_node):\n    for dist, node in node_heap:\n        if node == wanted_node:\n            return dist\n    return float('inf')\ndef insert_or_update(node_heap, dist_node):\n    dist, node = dist_node\n    for i, (a, b) in enumerate(node_heap):\n        if b == node:\n            if dist < a:\n                node_heap[i] = dist_node\n                heapify(node_heap)\n            return\n    heappush(node_heap, dist_node)"
        },
        {
            "run_time": 25.733247995376587,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 4,
            "fail_num": 0,
            "reparied_code": "from heapq import *\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = []\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node == goalnode:\n            return distance\n        visited_nodes.add(node)\n        for nextnode in node.successors:\n            if nextnode in visited_nodes:\n                continue\n            new_distance = distance + length_by_edge[node, nextnode]\n            insert_or_update(unvisited_nodes, (new_distance, nextnode))\n    return float('inf')\ndef get(node_heap, wanted_node):\n    for dist, node in node_heap:\n        if node == wanted_node:\n            return dist\n    return float('inf')\ndef insert_or_update(node_heap, dist_node):\n    dist, node = dist_node\n    for i, (a, b) in enumerate(node_heap):\n        if b == node:\n            if dist < a:\n                node_heap[i] = dist_node\n                heapify(node_heap)\n            return\n    heappush(node_heap, dist_node)"
        }
    ]
}