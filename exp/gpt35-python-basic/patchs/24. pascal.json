{
    "model_name": "gpt-3.5-turbo-0125",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\ndef pascal(n):\n    rows = [[1]]\n    for r in range(1, n):\n        row = []\n        for c in range(0, r):\n            upleft = rows[r - 1][c - 1] if c > 0 else 0\n            upright = rows[r - 1][c] if c < r else 0\n            row.append(upleft + upright)\n        rows.append(row)\n\n    return rows\n```\n\nFixed code:\n",
        "sample": {
            "prog_id": 24,
            "prog_name": "pascal",
            "language": "python"
        },
        "prompt_type": "basic"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 2.292692184448242,
            "repaired_code": "def pascal(n):\n    rows = [[1]]\n    for r in range(1, n):\n        row = []\n        for c in range(0, r+1):  # Fixed range to include r+1\n            upleft = rows[r - 1][c - 1] if c > 0 else 0\n            upright = rows[r - 1][c] if c < r else 0\n            row.append(upleft + upright)\n        rows.append(row)\n\n    return rows",
            "raw_code": "```python\ndef pascal(n):\n    rows = [[1]]\n    for r in range(1, n):\n        row = []\n        for c in range(0, r+1):  # Fixed range to include r+1\n            upleft = rows[r - 1][c - 1] if c > 0 else 0\n            upright = rows[r - 1][c] if c < r else 0\n            row.append(upleft + upright)\n        rows.append(row)\n\n    return rows\n```"
        },
        {
            "patch_id": 1,
            "run_time": 3.0731801986694336,
            "repaired_code": "def pascal(n):\n    rows = [[1]]\n    for r in range(1, n):\n        row = []\n        for c in range(0, r+1):  # Fixed range to include r\n            upleft = rows[r - 1][c - 1] if c > 0 else 0\n            upright = rows[r - 1][c] if c < len(rows[r-1]) else 0  # Fixed condition for upright\n            row.append(upleft + upright)\n        rows.append(row)\n\n    return rows",
            "raw_code": "```python\ndef pascal(n):\n    rows = [[1]]\n    for r in range(1, n):\n        row = []\n        for c in range(0, r+1):  # Fixed range to include r\n            upleft = rows[r - 1][c - 1] if c > 0 else 0\n            upright = rows[r - 1][c] if c < len(rows[r-1]) else 0  # Fixed condition for upright\n            row.append(upleft + upright)\n        rows.append(row)\n\n    return rows\n```"
        },
        {
            "patch_id": 2,
            "run_time": 2.311652898788452,
            "repaired_code": "def pascal(n):\n    rows = [[1]]\n    for r in range(1, n):\n        row = []\n        for c in range(0, r + 1):\n            upleft = rows[r - 1][c - 1] if c > 0 else 0\n            upright = rows[r - 1][c] if c < r else 0\n            row.append(upleft + upright)\n        rows.append(row)\n\n    return rows\n\nprint(pascal(5))",
            "raw_code": "```python\ndef pascal(n):\n    rows = [[1]]\n    for r in range(1, n):\n        row = []\n        for c in range(0, r + 1):\n            upleft = rows[r - 1][c - 1] if c > 0 else 0\n            upright = rows[r - 1][c] if c < r else 0\n            row.append(upleft + upright)\n        rows.append(row)\n\n    return rows\n\nprint(pascal(5))\n```"
        }
    ]
}