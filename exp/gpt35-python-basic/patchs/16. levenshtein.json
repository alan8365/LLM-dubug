{
    "model_name": "gpt-3.5-turbo-0125",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\ndef levenshtein(source, target):\n    if source == '' or target == '':\n        return len(source) or len(target)\n\n    elif source[0] == target[0]:\n        return 1 + levenshtein(source[1:], target[1:])\n\n    else:\n        return 1 + min(\n            levenshtein(source,     target[1:]),\n            levenshtein(source[1:], target[1:]),\n            levenshtein(source[1:], target)\n        )\n```\n\nFixed code:\n",
        "sample": {
            "prog_id": 16,
            "prog_name": "levenshtein",
            "language": "python"
        },
        "prompt_type": "basic"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 2.635969877243042,
            "repaired_code": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return max(len(source), len(target)\n\n    elif source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])\n\n    else:\n        return 1 + min(\n            levenshtein(source,     target[1:]),\n            levenshtein(source[1:], target[1:]),\n            levenshtein(source[1:], target)\n        )",
            "raw_code": "```python\ndef levenshtein(source, target):\n    if source == '' or target == '':\n        return max(len(source), len(target)\n\n    elif source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])\n\n    else:\n        return 1 + min(\n            levenshtein(source,     target[1:]),\n            levenshtein(source[1:], target[1:]),\n            levenshtein(source[1:], target)\n        )\n```"
        },
        {
            "patch_id": 1,
            "run_time": 3.5258848667144775,
            "repaired_code": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return max(len(source), len(target) )\n\n    elif source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])\n\n    else:\n        return 1 + min(\n            levenshtein(source,     target[1:]),\n            levenshtein(source[1:], target[1:]),\n            levenshtein(source[1:], target)\n        )",
            "raw_code": "```python\ndef levenshtein(source, target):\n    if source == '' or target == '':\n        return max(len(source), len(target) )\n\n    elif source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])\n\n    else:\n        return 1 + min(\n            levenshtein(source,     target[1:]),\n            levenshtein(source[1:], target[1:]),\n            levenshtein(source[1:], target)\n        )\n```"
        },
        {
            "patch_id": 2,
            "run_time": 2.2314069271087646,
            "repaired_code": "def levenshtein(source, target):\n    if source == '' or target == '':\n        return max(len(source), len(target))\n\n    elif source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])\n\n    else:\n        return 1 + min(\n            levenshtein(source, target[1:]),\n            levenshtein(source[1:], target[1:]),\n            levenshtein(source[1:], target)\n        )",
            "raw_code": "```python\ndef levenshtein(source, target):\n    if source == '' or target == '':\n        return max(len(source), len(target))\n\n    elif source[0] == target[0]:\n        return levenshtein(source[1:], target[1:])\n\n    else:\n        return 1 + min(\n            levenshtein(source, target[1:]),\n            levenshtein(source[1:], target[1:]),\n            levenshtein(source[1:], target)\n        )\n```"
        }
    ]
}