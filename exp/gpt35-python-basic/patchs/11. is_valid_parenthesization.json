{
    "model_name": "gpt-3.5-turbo-0125",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\ndef is_valid_parenthesization(parens):\n    depth = 0\n    for paren in parens:\n        if paren == '(':\n            depth += 1\n        else:\n            depth -= 1\n            if depth < 0:\n                return False\n\n    return True\n```\n\nFixed code:\n",
        "sample": {
            "prog_id": 11,
            "prog_name": "is_valid_parenthesization",
            "language": "python"
        },
        "prompt_type": "basic"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 2.147006034851074,
            "repaired_code": "def is_valid_parenthesization(parens):\n    depth = 0\n    for paren in parens:\n        if paren == '(':\n            depth += 1\n        else:\n            if depth <= 0:  # fixed this condition to <= instead of <\n                return False\n            depth -= 1\n\n    if depth == 0:  # added this condition to check if all parentheses are properly closed\n        return True\n    else:\n        return False",
            "raw_code": "```python\ndef is_valid_parenthesization(parens):\n    depth = 0\n    for paren in parens:\n        if paren == '(':\n            depth += 1\n        else:\n            if depth <= 0:  # fixed this condition to <= instead of <\n                return False\n            depth -= 1\n\n    if depth == 0:  # added this condition to check if all parentheses are properly closed\n        return True\n    else:\n        return False\n```"
        },
        {
            "patch_id": 1,
            "run_time": 2.357623815536499,
            "repaired_code": "def is_valid_parenthesization(parens):\n    depth = 0\n    for paren in parens:\n        if paren == '(':\n            depth += 1\n        else:\n            depth -= 1\n            if depth < 0:\n                return False\n    \n    if depth != 0:\n        return False\n\n    return True",
            "raw_code": "```python\ndef is_valid_parenthesization(parens):\n    depth = 0\n    for paren in parens:\n        if paren == '(':\n            depth += 1\n        else:\n            depth -= 1\n            if depth < 0:\n                return False\n    \n    if depth != 0:\n        return False\n\n    return True\n```"
        },
        {
            "patch_id": 2,
            "run_time": 2.150623083114624,
            "repaired_code": "def is_valid_parenthesization(parens):\n    depth = 0\n    for paren in parens:\n        if paren == '(':\n            depth += 1\n        else:\n            if depth == 0:  # Check if there are extra closing parentheses\n                return False\n            depth -= 1\n\n    return depth == 0  # Check if the depth is zero at the end",
            "raw_code": "```python\ndef is_valid_parenthesization(parens):\n    depth = 0\n    for paren in parens:\n        if paren == '(':\n            depth += 1\n        else:\n            if depth == 0:  # Check if there are extra closing parentheses\n                return False\n            depth -= 1\n\n    return depth == 0  # Check if the depth is zero at the end\n```"
        }
    ]
}