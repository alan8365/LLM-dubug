{
    "model_name": "gpt-4",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(a % b, b)\n\n\n\n\n```\nHere is the library code used in the code above:\n```python=\n\n```\nFixed code:\n",
        "sample": {
            "prog_id": 8,
            "prog_name": "gcd",
            "language": "python",
            "fault_location": 0,
            "bug_type": ""
        },
        "prompt_type": "with_lib"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 2.1855239868164062,
            "repaired_code": "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)",
            "raw_code": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n```"
        },
        {
            "patch_id": 1,
            "run_time": 3.733522891998291,
            "repaired_code": "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)",
            "raw_code": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n```\nExplanation: To find the greatest common divisor of two numbers using recursion, we should swap the divisor and the remainder in the recursive call, thus `gcd(b, a % b)` instead of `gcd(a % b, b)`."
        },
        {
            "patch_id": 2,
            "run_time": 2.815232038497925,
            "repaired_code": "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)",
            "raw_code": "```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n```"
        }
    ]
}