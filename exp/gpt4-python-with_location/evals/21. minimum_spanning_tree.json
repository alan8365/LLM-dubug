{
    "sample": {
        "prog_id": 21,
        "prog_name": "minimum_spanning_tree",
        "language": "python",
        "testcase_num": 3,
        "fault_location": 10,
        "bug_type": "",
        "bug_detail_desc": "在更新group_by_node變數時，誤用update函數在for loop中更新set引發RuntimeError，導致幾乎所有輸入都無法運行"
    },
    "patchs_eval": [
        {
            "run_time": 25.567776918411255,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 3,
            "fail_num": 0,
            "reparied_code": "def minimum_spanning_tree(weight_by_edge):\n    group_by_node = {}\n    mst_edges = set()\n    for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):\n        u, v = edge\n        if group_by_node.setdefault(u, {u}) is not group_by_node.setdefault(v, {v}):\n            mst_edges.add(edge)\n            if len(group_by_node[u]) < len(group_by_node[v]):\n                u, v = v, u\n            group_u = group_by_node[u]\n            group_v = group_by_node[v]\n            group_u.update(group_v)\n            for node in group_v:\n                group_by_node[node] = group_u\n    return mst_edges"
        },
        {
            "run_time": 21.938090085983276,
            "is_plausible": true,
            "is_correct": false,
            "pass_num": 3,
            "fail_num": 0,
            "reparied_code": "def minimum_spanning_tree(weight_by_edge):\n    group_by_node = {}\n    mst_edges = set()\n    for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):\n        u, v = edge\n        group_u = group_by_node.setdefault(u, {u})\n        group_v = group_by_node.setdefault(v, {v})\n        while group_u is not group_by_node[u]:\n            group_u = group_by_node[u]\n        while group_v is not group_by_node[v]:\n            group_v = group_by_node[v]\n        if group_u is not group_v:\n            mst_edges.add(edge)\n            merged_group = group_u | group_v\n            for node in merged_group:\n                group_by_node[node] = merged_group\n    return mst_edges"
        },
        {
            "run_time": 25.73114013671875,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 0,
            "fail_num": 3,
            "reparied_code": "def minimum_spanning_tree(weight_by_edge):\n    group_by_node = {}\n    mst_edges = set()\n\n    def find(node):\n        if group_by_node[node] is not node:\n            group_by_node[node] = find(group_by_node[node])\n        return group_by_node[node]\n\n    def union(node1, node2):\n        root1 = find(node1)\n        root2 = find(node2)\n        if root1 != root2:\n            group_by_node[root2] = root1\n\n    for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):\n        u, v = edge\n        if find(u) != find(v):\n            mst_edges.add(edge)\n            union(u, v)\n    return mst_edges"
        }
    ]
}