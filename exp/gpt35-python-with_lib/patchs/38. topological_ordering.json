{
    "model_name": "gpt-3.5-turbo-0125",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    for node in ordered_nodes:\n        for nextnode in node.outgoing_nodes:\n            if set(ordered_nodes).issuperset(nextnode.outgoing_nodes) and nextnode not in ordered_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes\n```\nHere is the library code used in the code above:\n```python=\nclass Node:\n    def __init__(self, value=None, successor=None, successors=[], predecessors=[], incoming_nodes=[], outgoing_nodes=[]):\n        self.value = value\n        self.successor = successor\n        self.successors = successors\n        self.predecessors = predecessors\n        self.incoming_nodes = incoming_nodes\n        self.outgoing_nodes = outgoing_nodes\n\n    def successor(self):\n        return self.successor\n\n    def successors(self):\n        return self.successors\n\n    def predecessors(self):\n        return self.predecessors\n\n\n```\nFixed code:\n",
        "sample": {
            "prog_id": 38,
            "prog_name": "topological_ordering",
            "language": "python"
        },
        "prompt_type": "with_lib"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 2.3690078258514404,
            "repaired_code": "def topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.predecessors]\n\n    for node in ordered_nodes:\n        for nextnode in node.successors:\n            if set(ordered_nodes).issuperset(nextnode.predecessors) and nextnode not in ordered_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes",
            "raw_code": "```python\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.predecessors]\n\n    for node in ordered_nodes:\n        for nextnode in node.successors:\n            if set(ordered_nodes).issuperset(nextnode.predecessors) and nextnode not in ordered_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes\n```"
        },
        {
            "patch_id": 1,
            "run_time": 1.8397948741912842,
            "repaired_code": "def topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    while len(ordered_nodes) < len(nodes):\n        for node in nodes:\n            if node not in ordered_nodes:\n                if set(ordered_nodes).issuperset(node.predecessors):\n                    ordered_nodes.append(node)\n\n    return ordered_nodes",
            "raw_code": "```python\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    while len(ordered_nodes) < len(nodes):\n        for node in nodes:\n            if node not in ordered_nodes:\n                if set(ordered_nodes).issuperset(node.predecessors):\n                    ordered_nodes.append(node)\n\n    return ordered_nodes\n```"
        },
        {
            "patch_id": 2,
            "run_time": 1.9160211086273193,
            "repaired_code": "def topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    for node in ordered_nodes:\n        for nextnode in node.outgoing_nodes:\n            if set(ordered_nodes).issuperset(nextnode.incoming_nodes) and nextnode not in ordered_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes",
            "raw_code": "```python\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    for node in ordered_nodes:\n        for nextnode in node.outgoing_nodes:\n            if set(ordered_nodes).issuperset(nextnode.incoming_nodes) and nextnode not in ordered_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes\n```"
        }
    ]
}