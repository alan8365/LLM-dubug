{
    "sample": {
        "prog_id": 0,
        "prog_name": "bitcount",
        "language": "python",
        "testcase_num": 9,
        "fault_location": 3,
        "bug_type": "",
        "bug_detail_desc": "在運算消除n中的1時，應該用and運算卻用成xor，造成原本應該能消掉1的步驟變成n只能保持不變，導致while迴圈無限循環"
    },
    "patchs_eval": [
        {
            "run_time": 3.14825177192688,
            "is_plausible": true,
            "is_correct": true,
            "pass_num": 9,
            "fail_num": 0,
            "reparied_code": "def bitcount(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count"
        },
        {
            "run_time": 2.4403600692749023,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 0,
            "fail_num": 9,
            "reparied_code": "def bitcount(n):\n    count = 0\n    while n and n != -1:\n        n ^= n - 1\n        count += 1\n    return count"
        },
        {
            "run_time": 2.195833683013916,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 1,
            "fail_num": 8,
            "reparied_code": "def bitcount(n):\n    if not n: return 0\n    count = 1\n    while n > 1:\n        n ^= n - 1\n        count += 1\n    return count"
        }
    ]
}