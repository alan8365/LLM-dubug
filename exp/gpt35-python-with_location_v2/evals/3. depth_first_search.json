{
    "sample": {
        "prog_id": 3,
        "prog_name": "depth_first_search",
        "language": "python",
        "testcase_num": 5,
        "fault_location": 9,
        "bug_type": "",
        "bug_detail_desc": "在向深處搜尋時，沒有紀錄已經造訪過的節點，導致除馬上找到goalnode以外的狀況遞迴都無法停止"
    },
    "patchs_eval": [
        {
            "run_time": 3.4877450466156006,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 0,
            "fail_num": 0,
            "reparied_code": "return any(\n        search_from(nextnode) for nextnode in node.successors()\n    )"
        },
        {
            "run_time": 5.611738204956055,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 0,
            "fail_num": 0,
            "reparied_code": "class Node:\n    def __init__(self, value=None, successor=None, successors=[], predecessors=[], incoming_nodes=[], outgoing_nodes=[]):\n        self.value = value\n        self.successor_node = successor\n        self.successors = successors\n        self.predecessors = predecessors\n        self.incoming_nodes = incoming_nodes\n        self.outgoing_nodes = outgoing_nodes\n    def successor(self):\n        return self.successor_node\n    def successors(self):\n        return self.successors\n    def predecessors(self):\n        return self.predecessors"
        },
        {
            "run_time": 3.5896692276000977,
            "is_plausible": false,
            "is_correct": false,
            "pass_num": 1,
            "fail_num": 4,
            "reparied_code": "def depth_first_search(startnode, goalnode):\n    nodesvisited = set()\n    def search_from(node):\n        if node in nodesvisited:\n            return False\n        elif node is goalnode:\n            return True\n        else:\n            return any(\n                search_from(nextnode) for nextnode in node.successors()\n            )\n    return search_from(startnode)"
        }
    ]
}