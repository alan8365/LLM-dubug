{
    "model_name": "gemini-1.0-pro",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\ndef lcs_length(s, t):\n    from collections import Counter\n\n    dp = Counter()\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i, j] = dp[i - 1, j] + 1\n\n    return max(dp.values()) if dp else 0\n\n\n\n\n\n```\n\nFixed code:\n",
        "sample": {
            "prog_id": 15,
            "prog_name": "lcs_length",
            "language": "python",
            "fault_location": 0,
            "bug_type": ""
        },
        "prompt_type": "basic"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 3.834681987762451,
            "repaired_code": "\ndef lcs_length(s, t):\n    from collections import Counter\n\n    dp = Counter()\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i, j] = dp[i - 1, j - 1] + 1\n\n    return max(dp.values()) if dp else 0\n\n\n\n\n",
            "raw_code": "```python=\ndef lcs_length(s, t):\n    from collections import Counter\n\n    dp = Counter()\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i, j] = dp[i - 1, j - 1] + 1\n\n    return max(dp.values()) if dp else 0\n\n\n\n\n\n```"
        },
        {
            "patch_id": 1,
            "run_time": 3.414038896560669,
            "repaired_code": "\ndef lcs_length(s, t):\n    from collections import Counter\n\n    dp = [[0 for _ in range(len(t) + 1)] for _ in range(len(s) + 1)]\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n\n    return max(max(row) for row in dp)\n\n",
            "raw_code": "```python\ndef lcs_length(s, t):\n    from collections import Counter\n\n    dp = [[0 for _ in range(len(t) + 1)] for _ in range(len(s) + 1)]\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n\n    return max(max(row) for row in dp)\n\n\n```"
        },
        {
            "patch_id": 2,
            "run_time": 4.024961948394775,
            "repaired_code": "\ndef lcs_length(s, t):\n    from collections import Counter\n\n    dp = Counter()\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + 1\n\n    return max(dp.values()) if dp else 0",
            "raw_code": "```python\ndef lcs_length(s, t):\n    from collections import Counter\n\n    dp = Counter()\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                dp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + 1\n\n    return max(dp.values()) if dp else 0\n```"
        }
    ]
}