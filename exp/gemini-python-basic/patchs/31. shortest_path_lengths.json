{
    "model_name": "gemini-1.0-pro",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\nfrom collections import defaultdict\n\ndef shortest_path_lengths(n, length_by_edge):\n    length_by_path = defaultdict(lambda: float('inf'))\n    length_by_path.update({(i, i): 0 for i in range(n)})\n    length_by_path.update(length_by_edge)\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                length_by_path[i, j] = min(\n                    length_by_path[i, j],\n                    length_by_path[i, k] + length_by_path[j, k]\n                )\n\n    return length_by_path\n\n\n\n\n```\n\nFixed code:\n",
        "sample": {
            "prog_id": 31,
            "prog_name": "shortest_path_lengths",
            "language": "python",
            "fault_location": 0,
            "bug_type": ""
        },
        "prompt_type": "basic"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 4.0499420166015625,
            "repaired_code": "\nfrom collections import defaultdict\n\ndef shortest_path_lengths(n, length_by_edge):\n    length_by_path = defaultdict(lambda: float('inf'))\n    length_by_path.update({(i, i): 0 for i in range(n)})\n    length_by_path.update(length_by_edge)\n\n    for _ in range(n):  # Perform n - 1 iterations\n        for i, j, dist in length_by_edge:\n            # If there is a path from i to j exists\n            if dist != -1:\n                length_by_path[i, j] = min(length_by_path[i, j], dist)\n                length_by_path[j, i] = min(length_by_path[j, i], dist)\n\n    return length_by_path\n\n\n\n",
            "raw_code": "```python=\nfrom collections import defaultdict\n\ndef shortest_path_lengths(n, length_by_edge):\n    length_by_path = defaultdict(lambda: float('inf'))\n    length_by_path.update({(i, i): 0 for i in range(n)})\n    length_by_path.update(length_by_edge)\n\n    for _ in range(n):  # Perform n - 1 iterations\n        for i, j, dist in length_by_edge:\n            # If there is a path from i to j exists\n            if dist != -1:\n                length_by_path[i, j] = min(length_by_path[i, j], dist)\n                length_by_path[j, i] = min(length_by_path[j, i], dist)\n\n    return length_by_path\n\n\n\n\n```"
        },
        {
            "patch_id": 1,
            "run_time": 4.7145140171051025,
            "repaired_code": "\nfrom collections import defaultdict\n\ndef shortest_path_lengths(n, length_by_edge):\n    length_by_path = defaultdict(lambda: float('inf'))\n    length_by_path.update({(i, i): 0 for i in range(n)})\n    length_by_path.update(length_by_edge)\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if min(length_by_path[i, k], length_by_path[k, j]) + length_by_edge[(i, j)]:\n                    length_by_path[i. j] = min(\n                        length_by_path[i, j],\n                        length_by_path[i, k] + length_by_path[k, j]\n                    )\n\n    return length_by_path",
            "raw_code": "```python=\nfrom collections import defaultdict\n\ndef shortest_path_lengths(n, length_by_edge):\n    length_by_path = defaultdict(lambda: float('inf'))\n    length_by_path.update({(i, i): 0 for i in range(n)})\n    length_by_path.update(length_by_edge)\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if min(length_by_path[i, k], length_by_path[k, j]) + length_by_edge[(i, j)]:\n                    length_by_path[i. j] = min(\n                        length_by_path[i, j],\n                        length_by_path[i, k] + length_by_path[k, j]\n                    )\n\n    return length_by_path\n```\nThe original code has two bugs:\n1. It doesn't check if there's an edge between `(i, j)` before updating `length_by_path[i, j]`.\n2. It doesn't update `length_by_path[i, j]` if the new value is greater than or equal to the old value."
        },
        {
            "patch_id": 2,
            "run_time": 3.6786811351776123,
            "repaired_code": "\nfrom collections import defaultdict\n\ndef shortest_path_lengths(n, length_by_edge):\n    length_by_path = defaultdict(lambda: float('inf'))\n    length_by_path.update({(i, i): 0 for i in range(n)})\n    length_by_path.update(length_by_edge)\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                length_by_path[i, j] = min(\n                    length_by_path[i, j],\n                    length_by_path[i, k] + length_by_path[k, j]\n                )\n\n    return length_by_path",
            "raw_code": "```python\nfrom collections import defaultdict\n\ndef shortest_path_lengths(n, length_by_edge):\n    length_by_path = defaultdict(lambda: float('inf'))\n    length_by_path.update({(i, i): 0 for i in range(n)})\n    length_by_path.update(length_by_edge)\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                length_by_path[i, j] = min(\n                    length_by_path[i, j],\n                    length_by_path[i, k] + length_by_path[k, j]\n                )\n\n    return length_by_path\n```"
        }
    ]
}