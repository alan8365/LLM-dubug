{
    "model_name": "gemini-1.0-pro",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    for node in ordered_nodes:\n        for nextnode in node.outgoing_nodes:\n            if set(ordered_nodes).issuperset(nextnode.outgoing_nodes) and nextnode not in ordered_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes\n\n\n\n```\n\nFixed code:\n",
        "sample": {
            "prog_id": 38,
            "prog_name": "topological_ordering",
            "language": "python",
            "fault_location": 0,
            "bug_type": ""
        },
        "prompt_type": "basic"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 2.6042189598083496,
            "repaired_code": "\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    while ordered_nodes:\n        node = ordered_nodes.pop(0)\n        for nextnode in node.outgoing_nodes:\n            nextnode.incoming_nodes.discard(node)\n            if not nextnode.incoming_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes",
            "raw_code": "```python\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    while ordered_nodes:\n        node = ordered_nodes.pop(0)\n        for nextnode in node.outgoing_nodes:\n            nextnode.incoming_nodes.discard(node)\n            if not nextnode.incoming_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes\n```"
        },
        {
            "patch_id": 1,
            "run_time": 2.700303316116333,
            "repaired_code": "\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    for node in ordered_nodes:\n        for nextnode in node.outgoing_nodes:\n            nextnode.incoming_nodes.remove(node)\n            if not nextnode.incoming_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes",
            "raw_code": "```python\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    for node in ordered_nodes:\n        for nextnode in node.outgoing_nodes:\n            nextnode.incoming_nodes.remove(node)\n            if not nextnode.incoming_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes\n```"
        },
        {
            "patch_id": 2,
            "run_time": 2.9932568073272705,
            "repaired_code": "\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    while ordered_nodes:\n        node = ordered_nodes.pop(0)\n        for nextnode in node.outgoing_nodes:\n            if set(ordered_nodes).issuperset(nextnode.outgoing_nodes) and nextnode not in ordered_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes\n\n\n",
            "raw_code": "```python\ndef topological_ordering(nodes):\n    ordered_nodes = [node for node in nodes if not node.incoming_nodes]\n\n    while ordered_nodes:\n        node = ordered_nodes.pop(0)\n        for nextnode in node.outgoing_nodes:\n            if set(ordered_nodes).issuperset(nextnode.outgoing_nodes) and nextnode not in ordered_nodes:\n                ordered_nodes.append(nextnode)\n\n    return ordered_nodes\n\n\n\n```"
        }
    ]
}