{
    "model_name": "gemini-1.0-pro",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\n\ndef get_factors(n):\n    if n == 1:\n        return []\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return [i] + get_factors(n // i)\n\n    return []\n\n\n\n\n```\n\nFixed code:\n",
        "sample": {
            "prog_id": 9,
            "prog_name": "get_factors",
            "language": "python",
            "fault_location": 0,
            "bug_type": ""
        },
        "prompt_type": "basic"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 2.035168170928955,
            "repaired_code": "\ndef get_factors(n):\n    if n == 1:\n        return []\n\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.extend(get_factors(n // i))\n            break\n\n    return factors\n\n",
            "raw_code": "```python\ndef get_factors(n):\n    if n == 1:\n        return []\n\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.extend(get_factors(n // i))\n            break\n\n    return factors\n\n\n```"
        },
        {
            "patch_id": 1,
            "run_time": 2.2153429985046387,
            "repaired_code": "\ndef get_factors(n):\n    if n == 1:\n        return [1]\n\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n\n    return list(set(factors))",
            "raw_code": "```python\ndef get_factors(n):\n    if n == 1:\n        return [1]\n\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n\n    return list(set(factors))\n```"
        },
        {
            "patch_id": 2,
            "run_time": 3.54610013961792,
            "repaired_code": "\ndef get_factors(n):\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i != n // i:\n                factors.append(n // i)\n    return factors",
            "raw_code": "```python\ndef get_factors(n):\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i != n // i:\n                factors.append(n // i)\n    return factors\n```"
        }
    ]
}