{
    "model_name": "gemini-1.0-pro",
    "prompt": {
        "prompt": "Fix the bugs in the following code:\n```python=\n\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(1, capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n            if weight < j:\n                memo[i, j] = max(\n                    memo[i, j],\n                    value + memo[i - 1, j - weight]\n                )\n\n    return memo[len(items), capacity]\n\n\n\n```\n\nFixed code:\n",
        "sample": {
            "prog_id": 13,
            "prog_name": "knapsack",
            "language": "python",
            "fault_location": 0,
            "bug_type": ""
        },
        "prompt_type": "basic"
    },
    "patches": [
        {
            "patch_id": 0,
            "run_time": 4.3650970458984375,
            "repaired_code": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for item in items:\n        weight, value = item\n\n        for j in range(capacity, weight - 1, -1):\n            memo[j] = max(\n                memo[j],\n                value + memo[j - weight]\n            )\n\n    return memo[capacity]",
            "raw_code": "```python=\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for item in items:\n        weight, value = item\n\n        for j in range(capacity, weight - 1, -1):\n            memo[j] = max(\n                memo[j],\n                value + memo[j - weight]\n            )\n\n    return memo[capacity]\n```"
        },
        {
            "patch_id": 1,
            "run_time": 3.5419511795043945,
            "repaired_code": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n            if weight <= j:\n                memo[i, j] = max(\n                    memo[i, j],\n                    value + memo[i - 1, j - weight]\n                )\n\n    return memo[len(items), capacity]",
            "raw_code": "```python\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(1, len(items) + 1):\n        weight, value = items[i - 1]\n\n        for j in range(capacity + 1):\n            memo[i, j] = memo[i - 1, j]\n\n            if weight <= j:\n                memo[i, j] = max(\n                    memo[i, j],\n                    value + memo[i - 1, j - weight]\n                )\n\n    return memo[len(items), capacity]\n```"
        },
        {
            "patch_id": 2,
            "run_time": 4.815783977508545,
            "repaired_code": "\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(len(items)):\n        weight, value = items[i]\n\n        for j in range(capacity, weight - 1, -1):\n            memo[i, j] = max(memo[i, j], value + memo[i - 1, j - weight])\n        memo[i, j] = max(memo[i, j], memo[i - 1, j])\n\n    return memo[len(items) - 1, capacity]\n\n",
            "raw_code": "```python\ndef knapsack(capacity, items):\n    from collections import defaultdict\n    memo = defaultdict(int)\n\n    for i in range(len(items)):\n        weight, value = items[i]\n\n        for j in range(capacity, weight - 1, -1):\n            memo[i, j] = max(memo[i, j], value + memo[i - 1, j - weight])\n        memo[i, j] = max(memo[i, j], memo[i - 1, j])\n\n    return memo[len(items) - 1, capacity]\n\n\n```"
        }
    ]
}