{
    "sample": {
        "prog_id": 29,
        "prog_name": "rpn_eval",
        "language": "python",
        "testcase_num": 6,
        "fault_location": 19,
        "bug_type": "",
        "bug_detail_desc": "在運算並放回stack時，忽略了stack中第一個pop的元素是擺在運算式後的元素，導致運算不符合交換律的輸入時皆會錯誤"
    },
    "patchs_eval": [
        {
            "run_time": 6.644151210784912,
            "pass_num": 3,
            "fail_num": 3,
            "reparied_code": "\ndef rpn_eval(tokens):\n    def op(symbol, a, b):\n        return {\n            '+': lambda a, b: a + b,\n            '-': lambda a, b: a - b,\n            '*': lambda a, b: a * b,\n            '/': lambda a, b: a / b\n        }.get(symbol, lambda a, b: None)(a, b)\n\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            if len(stack) < 2:\n                return None\n            a = stack.pop()\n            b = stack.pop()\n            result = op(token, a, b)\n            if result is None:\n                return None\n            stack.append(result)\n\n    if len(stack) != 1:\n        return None\n\n    return stack.pop()"
        },
        {
            "run_time": 4.663318157196045,
            "pass_num": 0,
            "fail_num": 6,
            "reparied_code": "\ndef rpn_eval(tokens):\n    def op(symbol, a, b):\n        return {\n            '+': lambda a, b: a + b,\n            '-': lambda a, b: a - b,\n            '*': lambda a, b: a * b,\n            '/': lambda a, b: int(a / b)  # Fix: Ensure integer division\n        }[symbol](a, b)\n\n    stack = []\n\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            if token not in op:\n                raise ValueError(f\"Invalid operator: {token}\")  # Fix: Handle invalid operators\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(\n                op(token, a, b)\n            )\n\n    if len(stack) != 1:\n        raise ValueError(\"Invalid postfix expression\")  # Fix: Check for valid postfix expression\n\n    return stack.pop()\n"
        },
        {
            "run_time": 3.854107141494751,
            "pass_num": 3,
            "fail_num": 3,
            "reparied_code": "\n\ndef rpn_eval(tokens):\n    def op(symbol, a, b):\n        return {\n            '+': lambda a, b: a + b,\n            '-': lambda a, b: a - b,\n            '*': lambda a, b: a * b,\n            '/': lambda a, b: a / b\n        }.get(symbol, lambda a, b: None)(a, b)\n\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, float):\n            stack.append(token)\n        else:\n            a = stack.pop()\n            b = stack.pop()\n            if a is None or b is None:\n                return None\n            stack.append(\n                op(token, a, b)\n            )\n\n    return stack.pop() if len(stack) == 1 else None\n\n\n\n\n"
        }
    ]
}