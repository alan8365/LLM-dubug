{
    "sample": {
        "prog_id": 30,
        "prog_name": "shortest_path_length",
        "language": "python",
        "testcase_num": 4,
        "fault_location": 19,
        "bug_type": "",
        "bug_detail_desc": "在動態規劃更新節點距離時，沒有加上起點到前一節點的距離，導致除了起點終點相同和起點終點不可達等特殊情況以外的輸入都無法獲得正確結果"
    },
    "patchs_eval": [
        {
            "run_time": 24.87670922279358,
            "pass_num": 1,
            "fail_num": 3,
            "reparied_code": "\nfrom heapq import *\n\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = [] # list containing (distance, node) pairs\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    shortest_distance = {startnode: 0}\n\n    while unvisited_nodes:\n        distance, node = heappop(unvisited_nodes)\n        if node == goalnode:\n            return distance\n\n        if node not in visited_nodes:\n            visited_nodes.add(node)\n\n            for nextnode, edge_length in length_by_edge[node].items():\n                if nextnode in visited_nodes:\n                    continue\n\n                new_distance = shortest_distance[node] + edge_length\n\n                if new_distance < shortest_distance.get(nextnode, float('inf')):\n                    shortest_distance[nextnode] = new_distance\n                    heappush(unvisited_nodes, (new_distance, nextnode))\n\n    return float('inf')"
        },
        {
            "run_time": 16.69247531890869,
            "pass_num": 1,
            "fail_num": 3,
            "reparied_code": "\nfrom heapq import *\n\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = [] # Heap containing (distance, node) pairs\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    dist_dict = {startnode: 0}\n\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node == goalnode:\n            return distance\n\n        visited_nodes.add(node)\n\n        for nextnode, edge_length in length_by_edge[node].items():\n            if nextnode in visited_nodes:\n                continue\n\n            new_distance = distance + edge_length\n            if nextnode not in dist_dict or new_distance < dist_dict[nextnode]:\n                dist_dict[nextnode] = new_distance\n                heappush(unvisited_nodes, (new_distance, nextnode))\n\n    return float('inf') #No path exists if function has not yet returned"
        },
        {
            "run_time": 14.28035306930542,
            "pass_num": 3,
            "fail_num": 1,
            "reparied_code": "\nfrom heapq import *\n\ndef shortest_path_length(length_by_edge, startnode, goalnode):\n    unvisited_nodes = [] # Heap containing (distance, node) pairs\n    heappush(unvisited_nodes, (0, startnode))\n    visited_nodes = set()\n    distances = {startnode: 0} # Dictionary to keep track of minimum distance from startnode to each node\n\n    while len(unvisited_nodes) > 0:\n        distance, node = heappop(unvisited_nodes)\n        if node == goalnode:\n            return distance\n\n        if node not in visited_nodes:\n            visited_nodes.add(node)\n\n            for nextnode in node.successors:\n                new_distance = distance + length_by_edge[(node, nextnode)]\n                if nextnode not in distances or new_distance < distances[nextnode]:\n                    distances[nextnode] = new_distance\n                    heappush(unvisited_nodes, (new_distance, nextnode))\n\n    return float('inf')"
        }
    ]
}