{
    "sample": {
        "prog_id": 29,
        "prog_name": "rpn_eval",
        "language": "python",
        "testcase_num": 6,
        "fault_location": 19,
        "bug_type": "",
        "bug_detail_desc": "在運算並放回stack時，忽略了stack中第一個pop的元素是擺在運算式後的元素，導致運算不符合交換律的輸入時皆會錯誤"
    },
    "patchs_eval": [
        {
            "run_time": 7.754989147186279,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "\n\ndef rpn_eval(tokens):\n    def op(symbol, a, b):\n        return {\n            '+': lambda a, b: a + b,\n            '-': lambda a, b: a - b,\n            '*': lambda a, b: a * b,\n            '/': lambda a, b: a / b\n        }[symbol](a, b)\n\n    stack = []\n\n    for token in tokens:\n        try:\n            # Check if token is convertible to float\n            float(token)\n            stack.append(float(token))\n        except ValueError:\n            b = stack.pop()\n            a = stack.pop()\n            stack.append(\n                op(token, a, b)\n            )\n\n    return stack.pop()\n"
        },
        {
            "run_time": 16.247133016586304,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "\n\ndef rpn_eval(tokens):\n    def op(symbol, a, b):\n        return {\n            '+': lambda: a + b,\n            '-': lambda: a - b,\n            '*': lambda: a * b,\n            '/': lambda: a / b\n        }[symbol]()\n\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, int) or isinstance(token, float):\n            stack.append(token)\n        else:\n            b = stack.pop()\n            a = stack.pop()\n            stack.append(\n                op(token, a, b)\n            )\n\n    return stack.pop()\n"
        },
        {
            "run_time": 12.428637981414795,
            "pass_num": 6,
            "fail_num": 0,
            "reparied_code": "\ndef rpn_eval(tokens):\n    def op(symbol, a, b):\n        return {\n            '+': lambda: a + b,\n            '-': lambda: a - b,\n            '*': lambda: a * b,\n            '/': lambda: a / b\n        }[symbol]()\n\n    stack = []\n\n    for token in tokens:\n        if isinstance(token, (float, int)):\n            stack.append(token)\n        else:\n            b = stack.pop()\n            a = stack.pop()\n            stack.append(\n                op(token, a, b)\n            )\n\n    if len(stack) != 1:\n        raise Exception('Error: More than one item left on the stack.')\n    else:\n        return stack.pop()"
        }
    ]
}